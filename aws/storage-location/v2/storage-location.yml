---
AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::LanguageExtensions

Description: >
  MathWorks Reference Architectures Template Storage Location: Creates an Amazon S3 Bucket to store objects in AWS. version: v1.0.0

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Bucket Options
        Parameters:
          - BucketName
          - DeletionPolicy
          - Versioning
          - CreateNewBucket

    ParameterLabels:
      BucketName:
        default: Bucket Name
      DeletionPolicy:
        default: Deletion Policy

Parameters:
  BucketName:
    Type: String
    Default: ''
    Description: A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses that ID for the bucket name.
    AllowedPattern: ^([a-z0-9][a-z0-9.-]{1,61}[a-z0-9])?$
    ConstraintDescription: Bucket names must be between 3 and 63 characters long, consist only of lowercase letters, numbers, dots (.), and hyphens (-), and must begin and end with a letter or number.
  DeletionPolicy:
    Type: String
    AllowedValues: [Delete, Retain]
    Default: Retain
    Description: Specify what to do with the bucket when its stack is deleted.
  Versioning:
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'No'
    Description: Version the objects in the bucket.
  CreateNewBucket:
    Type: String
    AllowedValues: ['Yes', 'No']
    Default: 'Yes'
    Description: Specify whether to create a new bucket. If set to 'No', the bucket you specify in BucketName will be used.

Rules:
  FailIfNoBucketName:
    RuleCondition: !Equals [ !Ref CreateNewBucket, 'No' ]
    Assertions:
      - Assert: !Not [ !Equals [ !Ref BucketName, '' ] ]
        AssertDescription: "Either provide the name of an existing bucket in [BucketName], or create a new bucket by setting [CreateNewBucket] to 'Yes'."

Conditions:
  GenerateName: !Equals [ !Ref BucketName, '' ]
  DeleteBucket: !Equals [ !Ref DeletionPolicy, Delete ]
  EnableVersioning: !Equals [ !Ref Versioning, 'Yes' ]
  CreateNewBucketCondition: !Equals [ !Ref CreateNewBucket, 'Yes' ]

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Condition:  CreateNewBucketCondition
    DeletionPolicy: !Ref DeletionPolicy
    Properties:
      BucketName: !If [ GenerateName, !Ref AWS::NoValue, !Ref BucketName ]
      VersioningConfiguration: !If [ EnableVersioning, Status: Enabled, !Ref AWS::NoValue ]

  EmptyBucketLambda:
    Type: AWS::Lambda::Function
    Condition: DeleteBucket
    Properties:
      Code: 
        ZipFile: |
          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
                status = cfnresponse.SUCCESS
                data = {'Message': '', 'Errors': ''}

                try:
                    bucket_name = event['ResourceProperties']['BucketName']
                    s3 = boto3.resource('s3')

                    if event['RequestType'] == 'Create':
                        create_new_bucket = event['ResourceProperties']['CreateNewBucket']
                        if create_new_bucket == 'No':
                            try:
                                s3.meta.client.head_bucket(Bucket=bucket_name)
                            except ClientError as e:
                                print(e)
                                reason = f'Unable to find a bucket with name "{bucket_name}". Make sure S3 bucket exists when specifying CreateNewBucket = No. See the details in CloudWatch Log Stream: {context.log_stream_name}'
                                data['Message'] += reason
                                cfnresponse.send(event, context, cfnresponse.FAILED, data, None, False, reason)
                                return                           
                    elif event['RequestType'] == 'Delete':
                        bucket = s3.Bucket(bucket_name)
                        versioning = bucket.Versioning()
                        if versioning.status:
                            versioning.suspend()
                            response = bucket.object_versions.delete()
                            if any('Errors' in r for r in response):
                                status = cfnresponse.FAILED
                                data['Errors'] += ';'.join(str(r['Errors']) for r in response)
                            else:
                                data['Message'] += 'Versions deleted successfully.'
                        else:
                            data['Message'] += 'Bucket is not versioned.'
                        response = bucket.objects.delete()
                        if any('Errors' in r for r in response):
                            status = cfnresponse.FAILED
                            data['Errors'] += ';'.join(str(r['Errors']) for r in response)
                        else:
                            data['Message'] += 'Objects deleted successfully.'
                    else:
                        data['Message'] += 'Lambda created successfully.'
                
                except Exception as e:
                    status = cfnresponse.FAILED
                    data['Exception'] = str(e)
                cfnresponse.send(event, context, status, data)

      Handler: index.lambda_handler
      Runtime: python3.12
      Timeout: 900
      Role: !GetAtt EmptyBucketRole.Arn

  EmptyBucketRole:
    Type: AWS::IAM::Role
    Condition: DeleteBucket
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: empty-bucket-core
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowRead
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketVersioning
                Resource: !If 
                  - CreateNewBucketCondition
                  - !GetAtt Bucket.Arn
                  - !Sub arn:aws:s3:::${BucketName}
              - Sid: AllowEdit
                Effect: Allow
                Action:
                  - s3:PutBucketVersioning
                Resource: !If 
                  - CreateNewBucketCondition
                  - !GetAtt Bucket.Arn
                  - !Sub arn:aws:s3:::${BucketName}
              - Sid: AllowDelete
                Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !If 
                  - CreateNewBucketCondition
                  - !Sub ${Bucket.Arn}/*
                  - !Sub arn:aws:s3:::${BucketName}/*

  EmptyBucketTrigger:
    Type: Custom::LambdaTrigger
    Condition: DeleteBucket
    Properties: 
      ServiceToken: !GetAtt EmptyBucketLambda.Arn
      CreateNewBucket: !Ref CreateNewBucket
      BucketName: !If 
       - CreateNewBucketCondition
       - !Ref Bucket
       - !Ref BucketName

Outputs:
  BucketName:
    Value: !If 
      - CreateNewBucketCondition
      - !Ref Bucket
      - !Ref BucketName
  BucketArn:
    Value: !If 
      - CreateNewBucketCondition
      - !GetAtt Bucket.Arn
      - !Sub arn:aws:s3:::${BucketName}